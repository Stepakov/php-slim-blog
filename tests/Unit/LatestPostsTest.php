<?php

namespace Blog\tests\Unit;

use Blog\Database;
use Blog\LatestPosts;
use PDO;
use PDOStatement;
use PHPUnit\Framework\TestCase;

class LatestPostsTest extends TestCase
{
    private LatestPosts $latestPosts;
    /**
     * @var MockDatabase | Database
     */
    private MockDatabase | Database $database;

    private MockPDO | PDO $pdo;

    private MockPDOStatement | PDOStatement $statement;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->database = $this->createMock( Database::class );

        $this->pdo = $this->createMock( PDO::class );

        $this->database->expects( $this->any() )
            ->method( 'getConnection' )
            ->willReturn( $this->pdo );

        $this->statement = $this->createMock( \PDOStatement::class );

        $this->latestPosts = new LatestPosts( $this->database );
    }

    public function testGetEmpty() : void
    {
        $limit = 0;
        $expectedResult = [];

//        $pdo = $this->createMock( PDO::class );
//
//        $this->database->expects( $this->any() )
//            ->method( 'getConnection' )
//            ->willReturn( $pdo );

//        $statement = $this->createMock( \PDOStatement::class );

        $this->pdo->expects( $this->once() )
            ->method( 'prepare' )
            ->willReturn( $this->statement );

        $this->statement->expects( $this->once() )
            ->method( 'execute' );

        $this->statement->expects( $this->once() )
            ->method( 'fetchAll' )
            ->willReturn( $expectedResult );

        $result = $this->latestPosts->get( $limit );

        $this->assertEmpty( $result );
    }

    public function testGet() : void
    {
        $limit = 3;
        $expectedResult = [
            'title' => "Post 1 title",
            'author' => "Sasha"
        ];



//        $statement = $this->createMock( \PDOStatement::class );

        $this->pdo->expects( $this->once() )
            ->method( 'prepare' )
            ->with( $this->equalTo( "SELECT * FROM post ORDER BY published_date DESC LIMIT :limit" ) )
            ->willReturn( $this->statement );

        $this->statement->expects( $this->once() )
            ->method( 'bindParam' )
            ->with( $this->equalTo( ":limit" ), $this->equalTo( $limit ) );

        $this->statement->expects( $this->once() )
            ->method( 'execute' );

        $this->statement->expects( $this->once() )
            ->method( 'fetchAll' )
            ->willReturn( $expectedResult );

        $result = $this->latestPosts->get( $limit );

        $this->assertNotEmpty( $result );
    }


}